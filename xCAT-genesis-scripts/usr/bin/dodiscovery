#!/bin/bash
log_label="xcat.genesis.dodiscovery"

#the time when the latest findme request is sent to master
reqtime=0
#the timeout value on the waiting for the "processed" response from master
#when the xcatd on master finished the processing of my findme request,
#a "processed" response will be replied
maxresptime=180

minixcatd.awk &
PUBKEY=$(openssl rsa -in /etc/xcat/privkey.pem -pubout 2> /dev/null|grep -v "PUBLIC KEY")
# note: if we use $(echo "$PUBKEY"...) here bash leaves the newlines, breaking sed
#shellcheck disable=2001,2086
PUBKEY=$(echo $PUBKEY|sed -e 's/ //g')
export PUBKEY

logger -s -t $log_label -p local4.info "Beginning node discovery process..."
for nic in $(ip -o link|grep -v LOOPBACK|grep -v usb|grep -v ,LOWER_UP|grep -v NO-CARRIER|awk -F: '{print $2}'); do
    ip link set "$nic" up
done
waitforlink=100
while [ -n "$NICSTOBRINGUP" ] && [ $waitforlink -gt 0 ]; do
    NICSTOBRINGUP=$(ip -o link|grep -v LOOPBACK|grep -v usb|grep -v ,LOWER_UP|grep -v NO-CARRIER|awk -F: '{print $2}')
    waitforlink=$((waitforlink - 1))
    sleep 0.1
    if [ $waitforlink = 1 ]; then
        logger -s -t $log_label -p local4.warning "No link detected on $NICSTOBRINGUP after 10 seconds"
    fi
done
NICSGETTINGADDR=$(ip -o link|grep -v LOOPBACK|grep -v usb|grep ,LOWER_UP|grep -v NO-CARRIER|awk -F: '{print $2}')
timewaiting=0
logger -s -t $log_label -p local4.info "Waiting for nics to get addresses"
while [ -n "$NICSGETTINGADDR" ] && [ $timewaiting != 700 ]; do
    NEWNICSGETTINGADDR=""
    for nic in $NICSGETTINGADDR; do
        if ! ip -4 -o a show dev "$nic" |grep -q inet;  then
            NEWNICSGETTINGADDR="$NEWNICSGETTINGADDR $nic"
        else
            echo -n "$nic|"
            ip -4 -o addr show dev "$nic" | awk '{print $4}' | sed -e sX/.*XX
        fi
    done
    sleep 0.1
    timewaiting=$((timewaiting+1))
    if [ $timewaiting = 699 ]; then
        logger -s -t $log_label -p local4.warning "No DHCP answer for $nic, ignoring interface..."
    fi
    NICSGETTINGADDR=$NEWNICSGETTINGADDR
done
if [ $timewaiting != 700 ] && [ $timewaiting -gt 450 ]; then
    logger -s -t $log_label -p local4.warning "Obtained an IP address $NICSGETTINGADDR but it took $timewaiting cycles, you may want to check the spanning tree configuration in the switch."
fi
logger -s -t $log_label -p local4.info "Network configuration complete, commencing transmit of discovery packets"

#time to make our packet...
while [ ! -r /restart ]; do

    #record the current time
    curtime=$(date +%s)

    #the existence of "/processing" indicates that my  findme request is under processing
    if [ -f "/processing"  ]; then
        if [ "$curtime" -gt $((reqtime+maxresptime)) ]; then
           #I think my findme request processing is timeout, I will resend the findme request
           logger -s -t $log_label -p local4.info  "seems the processing of my findme request cost more than $maxresptime, send new findme request"
           rm -rf /processing
        else
           logger -s -t $log_label -p local4.info  "My findme request is still under processing, do not send new request"
           sleep 5
        fi
        continue
    fi

    MTM=unknown
    SERIAL=unknown
    ARCH=unknown
    ARCH=$(uname -m) #32-bit only is old news
    PLATFORM=unknown
    if [ -r /sys/devices/virtual/dmi/id/product_name ]; then  #x86
        PRODNAME=$(cat /sys/devices/virtual/dmi/id/product_name)
        IAMAVM=0
        if [ "$PRODNAME" = "KVM" ]; then
            IAMAVM=1
            MTM=KVM
        elif [ "$PRODNAME" = "VMware Virtual Platform" ]; then
            IAMAVM=1
            MTM=VMware
        else
            MTM=$(awk -F'[' '{print $2}' </sys/devices/virtual/dmi/id/product_name |awk -F']' '{print $1}')
            if [ -z "$MTM" ]; then
                FRU=$(ipmitool fru print 0)
                if [ -n "$FRU" ]; then
                    MTM=$(echo "$FRU" | awk -F': ' '/Product Manufacturer/ {m=$2} /Product Name|Product Part Number/ {if (n==""||n=="NONE") {n=$2}} END {print m":"n}')
                fi
                if [ -z "$MTM" ] || [ "$MTM" == ":" ]; then
                    logger -s -t $log_label -p local4.warning "Couldn't find MTM information in FRU, falling back to DMI (MTMS-based discovery may fail)"
                    m=$(cat /sys/devices/virtual/dmi/id/sys_vendor)
                    n=$(cat /sys/devices/virtual/dmi/id/product_name)
                    MTM="$m:$n"
                fi
            fi
            SERIAL=$(cat /sys/devices/virtual/dmi/id/product_serial)
        fi
            CPUCOUNT=$(grep -c "model name" /proc/cpuinfo)
            CPUTYPE=$(grep 'model name' /proc/cpuinfo |tail -1 |awk -F': ' '{print $2}')
            UUID=$(sed -e 's/\(..\)\(..\)\(..\)\(..\)-\(..\)\(..\)-\(..\)\(..\)/\4\3\2\1-\6\5-\8\7/' /sys/devices/virtual/dmi/id/product_uuid)

    elif [ -r /proc/device-tree/model ]; then #POWER
            MTM=$(cat /proc/device-tree/model -vT | sed -e 's/^.*,//' | sed -e 's/^[\t ]*//'| sed -e 's/[\t ]*\^@//')
            CPUCOUNT=$(grep -c -e "^cpu\s*:" /proc/cpuinfo)
            PLATFORM=$(grep -e "^platform\s*:" /proc/cpuinfo | awk '{print \$3}')
            CPUTYPE=$(grep -e '^cpu\s*:' /proc/cpuinfo |tail -1 |awk -F': ' '{print $2}')
            SERIAL=$(cat /proc/device-tree/system-id -vT | sed -e 's/^.*,//' | sed -e 's/^[\t ]*//'| sed -e 's/[\t ]*\^@//')
            # For POWER servers, the /proc/sys/kernel/random/uuid is changing for each query, so use mtms + mac of first up nic as the UUID
            #UUID=$(sed -e 's/\(..\)\(..\)\(..\)\(..\)-\(..\)\(..\)-\(..\)\(..\)/\4\3\2\1-\6\5-\8\7/' /proc/sys/kernel/random/uuid)
            UUID=unknown

    fi

    # The MEMORY will look like this: 32868920
    MEMORY=$(grep MemTotal /proc/meminfo |awk '{printf "%.0fMB\n", $2/1024}')

    # The DISKSIZE will look like this: sda:960GB,sdb:960GB,sdc:480GB,sdd:480GB,nvme0n1:1490GB,nvme01n1:1490GB (sorted by major,minor)
    DISKSIZE=$(grep -v name /proc/partitions |sort -g -k 1,2 |awk 'BEGIN{sep=""} /[^0-9]$/{printf("%s%s:%.0fGB", sep, $4, $3/1024^2) ; sep=","}')
    DISKSIZE_NVME=$(grep -v name /proc/partitions |sort -g -k 1,2 |awk 'BEGIN{sep=""} /nvme[0-9]+n[0-9]+$/{printf("%s%s:%.0fGB", sep, $4, $3/1024^2) ; sep=","}')
    if [ -n "$DISKSIZE_NVME" ]; then
        DISKSIZE="$DISKSIZE,$DISKSIZE_NVME"
    fi

    logger -s -t $log_label -p local4.info "Beginning echo information to discovery packet file..."
    cat <<EOF > /tmp/discopacket
<xcatrequest>
<command>findme</command>
<sequential>1</sequential>
<arch>$ARCH</arch>
EOF
    if [ "$IAMAVM" = 1 ]; then
        echo "<nodetype>virtual</nodetype>" >> /tmp/discopacket
    fi
    cat <<EOF >>/tmp/discopacket
<cpucount>$CPUCOUNT</cpucount>
<cputype>$CPUTYPE</cputype>
<memory>$MEMORY</memory>
<disksize>$DISKSIZE</disksize>
EOF
    if [ "$UUID" != "unknown" ]; then
            echo "<uuid>$UUID</uuid>" >> /tmp/discopacket
    fi

    flag_mtm=${MTM//0/}
    if [ "$flag_mtm" ] && [ "$MTM" != "unknown" ]; then
        MTM=${MTM//./}
        echo "<mtm>$MTM</mtm>" >> /tmp/discopacket
    fi
    flag_serial=${SERIAL//0/}
    if [ "$flag_serial" ] && [ "$SERIAL" != "unknown" ]; then
        SERIAL=${SERIAL//./}
        echo "<serial>$SERIAL</serial>" >> /tmp/discopacket
    fi
    if [ "$PLATFORM" != "unknown" ]; then
            echo "<platform>$PLATFORM</platform>" >> /tmp/discopacket
    fi

    # the sol info payload channel doesn't seem to be saying what it seems like
    # it should be saying, so this is an alternative approach that Seems To
    # Work For Me(tm)
    #LANCHAN=$(ipmitool sol info 2>/dev/null|awk '/Payload Channel/{print $4}')
    #IsStatic=$(ipmitool lan print "$LANCHAN" | grep 'IP Address Source' | grep 'Static')
    for i in 0 1 2; do
        if ipmitool sol info $i &>/dev/null; then
            LANCHAN=$i
            break
        fi
    done
    # if the bmc address is set by the BIOS we want to capture that here too
    IsStatic=$(ipmitool lan print "$LANCHAN" |grep 'IP Address Source' |grep -E '(Static|BIOS)')
    if [ "$IsStatic" ]; then
        BMCIPADDR=$(ipmitool lan print "$LANCHAN" | grep 'IP Address' | grep -v 'IP Address Source' | cut -d ":" -f2 | sed 's/ //')
        if [ "$BMCIPADDR" ]; then
            echo "<bmc>$BMCIPADDR</bmc>" >> /tmp/discopacket
        fi
    fi

    BMCMAC=$(ipmitool lan print "$LANCHAN" | grep 'MAC Address' | cut -d ":" -f2-7 | sed 's/ //')
    if [ "$BMCMAC" ]; then
        echo "<bmcmac>$BMCMAC</bmcmac>" >> /tmp/discopacket
    fi

    # Check whether the hardware support in-band BMC configuration with the IPMI device
    if [ -r /dev/ipmi0 ] || [ -r /dev/ipmi/0 ] || [ -r /dev/ipmidev/0 ]; then
        echo "<bmcinband>1</bmcinband>" >> /tmp/discopacket
    fi

    #so we have some cases where DMI table explictly records every function number, and some where only first function is enumerated
    #so for each onboard device, we record it.  If it is also the first function, we'll seek out other function numbers and append
    #if that other function number does not show up in its own dmi type 41 record
    if [ -f "/usr/sbin/dmidecode" ]; then
        for onboard in $(dmidecode -t 41|grep -E '(Type:|Bus Address)'|grep -A1 Ethernet|grep -v Ethernet|sed -e 's/.*Address: //'); do
            obdevs=("${obdevs[@]}" "$onboard")
            if [ "${onboard#*.}" = 0 ]; then
                truncslot=${onboard%.*}
                #shellcheck disable=2013
                for obslot in $(grep "$truncslot" /sys/class/net/*/device/uevent|sed -e s/.*=//); do
                    if ! dmidecode -t 41|grep "$obslot" > /dev/null; then
                        obdevs=("${obdevs[@]}" "$obslot")
                    fi
                done
            fi
        done
    fi
    MAC_OF_FIRST_UP_NIC=unknown
    #TODO: downed nics, also examine /sys/bus/pci/*/ for more network class devices that might not have driver suppert
    for dev in $(ip -o link|grep ether|grep UP|grep -v usb|awk -F ': ' '{print $2}'); do
        FIRMDESC=""
        ONBOARDINDEX=""
        DRIVER=$(grep DRIVER "/sys/class/net/$dev/device/uevent"|awk -F= '{print $2}')
        PCI_SLOT=$(grep PCI_SLOT_NAME "/sys/class/net/$dev/device/uevent"|awk -F= '{print $2}')
        ADDRESS=$(ip -4 -o a show dev "$dev"|awk '/global/{print $4}')
        MAC=$(ip link show dev "$dev"|grep ether|awk '{print $2}'| tr /a-f/ /A-F/)
        if [ "$MAC_OF_FIRST_UP_NIC" == "unknown" ]; then
            MAC_OF_FIRST_UP_NIC=${MAC//:/}
        fi
        if [[ -n "$PCI_SLOT" && -f "/usr/sbin/dmidecode" ]]; then
            SLOTNAME=$(dmidecode -t 9|grep -E '(Designation|Address)'|grep -B1 "$PCI_SLOT"|grep Designation|sed -e 's/.*Designation:[     ]*//')
            if [ -z "$SLOTNAME" ]; then #check for on board device
                index=1
                for s in "${obdevs[@]}"; do
                    if [ "$s" = "$PCI_SLOT" ]; then
                        ONBOARDINDEX=$index
                        break
                    fi
                    index=$((index+1))
                done
                if [ -n "$ONBOARDINDEX" ]; then
                    FIRMDESC=$(dmidecode -t 41|grep -E '(Designation|Address)' |grep -B 1 "$PCI_SLOT"|grep Designation|sed -e 's/.*: //')
                    if [ -z "$FIRMDESC" ]; then
                        SHORTPCISLOT=${PCI_SLOT%.*}
                        FIRMDESC=$(dmidecode -t 41|grep -E '(Designation|Address)' |grep -B 1 "$SHORTPCISLOT"|grep Designation|sed -e 's/.*: //')
                    fi
                    SLOTNAME="Onboard Ethernet $ONBOARDINDEX"
                fi
            fi
        fi
        cat <<EOF >>/tmp/discopacket
<mac>$DRIVER|$dev|$MAC|$ADDRESS</mac>
<nic>
    <devname>$dev</devname>
    <driver>$DRIVER</driver>
EOF
        if [ -n "$ADDRESS" ]; then
            echo "    <ip4address>$ADDRESS</ip4address>" >> /tmp/discopacket
        fi
        echo "    <hwaddr>$MAC</hwaddr>" >> /tmp/discopacket
        if [ -n "$PCI_SLOT" ]; then
            echo "    <pcidev>$PCI_SLOT</pcidev>" >> /tmp/discopacket
        fi
        if [ -n "$SLOTNAME" ]; then
            echo "    <location>$SLOTNAME</location>" >> /tmp/discopacket
        fi
        if [ -n "$ONBOARDINDEX" ]; then
            echo "    <onboardeth>$ONBOARDINDEX</onboardeth>" >> /tmp/discopacket
        fi
        if [ -n "$FIRMDESC" ]; then
            echo "    <firmdesc>$FIRMDESC</firmdesc>" >> /tmp/discopacket
        fi
        # only record this data if the agent is actually running for this
        # device - note that we're checking /this/ device, not the neighbour,
        # so this should succeed as long as lldpad has started listening on it
        if lldptool -i "$dev" -t -V sysName &>/dev/null; then
            myswitch=$(lldptool -n -i "$dev" -t -V sysName|awk '/^[[:space:]]+/ {print $1}')
            if [ -n "$myswitch" ]; then
                echo "    <switchname>$myswitch</switchname>" >> /tmp/discopacket
            fi
            for switchaddr in $(lldptool -i "$dev" -n -t -V mngAddr|awk '/IP/ {print $2}'); do
                if [ -n "$switchaddr" ]; then
                echo "    <switchaddr>$switchaddr</switchaddr>" >> /tmp/discopacket
            done
            myswitchdesc=$(lldptool -n -i "$dev" -t -V sysDesc|sed -e '/^[^[:space:]]/d; s/^[[:space:]]\+//')
            if [ -n "$myswitchdesc" ]; then
                echo "    <switchdesc>$myswitchdesc</switchdesc>" >> /tmp/discopacket
            fi
            myport=$(lldptool -n -i "$dev" -t -V portDesc|awk '/^[[:space:]]+/ {print $1}')
            if [ -n "$myport" ]; then
                echo "    <switchport>$myport</switchport>" >> /tmp/discopacket
            fi
        fi
            
        echo "</nic>" >> /tmp/discopacket
    done
    if [ "$UUID" == "unknown" ]; then
        UUID=$(echo "$MTM-$SERIAL-$MAC_OF_FIRST_UP_NIC" | tr /A-Z/ /a-z/)
        echo "<uuid>$UUID</uuid>" >> /tmp/discopacket
    fi

    #this is not secure to use by itself, switch sourced pubkey for security
    cat <<EOF >>/tmp/discopacket
<xcatpubkey>$PUBKEY</xcatpubkey>
<sha512sig>
</sha512sig>
</xcatrequest>
EOF
    openssl dgst -sha512 -out /tmp/discopacket.sha512 -sign /etc/xcat/privkey.pem /tmp/discopacket
    openssl enc -e -a -in /tmp/discopacket.sha512  > /tmp/discopacket.b64sig
    while read -r line; do
        if [ "$line" = "</sha512sig>" ]; then
            cat /tmp/discopacket.b64sig >> /tmp/discopacket.new
        fi
        echo "$line" >> /tmp/discopacket.new
    done </tmp/discopacket
    mv /tmp/discopacket.new /tmp/discopacket
    logger -s -t $log_label -p local4.info "Discovery packet file is ready."
    rm -f /tmp/discopacket.gz
    gzip -9 /tmp/discopacket
    if [ -n "$XCATMASTER" ]; then
        logger -s -t $log_label -p local4.info "Sending the discovery packet to xCAT ($XCATMASTER:$XCATPORT)..."
        (udpcat.awk "$XCATMASTER" "$XCATPORT" </tmp/discopacket.gz) &
    fi
    # FIXME: this should handle ipv6 addresses as well, from $DHCLIENTDIR/dhclient6.leases
    while read -r dhcps; do
        logger -s -t $log_label -p local4.info "Sending the discovery packet to xCAT ($dhcps:$XCATPORT)..."
        (udpcat.awk "$dhcps" "$XCATPORT" </tmp/discopacket.gz) &
    done < <(grep dhcp-server "$DHCLIENTDIR"/dhclient.*.lease |awk '{print $3}' |sed -e 's/;//')

    #record the time when the "findme request is sent to master"
    reqtime=$(date +%s)
    #cat /tmp/discopacket
    logger -s -t $log_label -p local4.info "Sleeping 5 seconds..."
    sleep 5
done
logger -s -t $log_label -p local4.info "Restart network interfaces..."
/bin/restart
